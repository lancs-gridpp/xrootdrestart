#!/bin/bash

set -e

check_port() {
  local port=$1
  local label=$2

  # Check if the port is in use using /proc/net/tcp and /proc/net/tcp6
  if grep -q ":$(printf '%04X' $port)" /proc/net/tcp /proc/net/tcp6 2>/dev/null; then
    echo "Port $port used by $label is already in use." >&2
  else
    echo "Port $port used by $label is available."
  fi
}

# Get one of the IP addresses of an available nic 
get_ip() {
  local ip
  ip=$(hostname -I | awk '{print $1}')
  
  if [[ -z "$ip" ]]; then
    echo "Error: No IP address found." >&2
    exit 1
  fi

  echo "$ip"
}

# Create a podman volume if it doesn't exist
create_volume() {
    local volume_name="$1"
    if ! podman volume inspect "$volume_name" &> /dev/null; then
        echo "Volume '$volume_name' does not exist. Creating it..."
        podman volume create "$volume_name"
        echo "Volume '$volume_name' created."
    else
        echo "Volume '$volume_name' already exists."
    fi
}

# Function to check if a container exists and is running
run_or_start_container() {
  local container_name=$1
  local run_command=$2

  if podman ps -a --format "{{.Names}}" | grep -qw "$container_name"; then
    # Check if the container is already running
    if podman ps --format "{{.Names}}" | grep -qw "$container_name"; then
      echo "$container_name is already running."
    else
      echo "Starting existing container: $container_name"
      podman start "$container_name"
    fi
  else
    echo "Creating and running container: $container_name"
    eval "$run_command"
  fi
}

# Make sure the ports aren't already in use
check_port 9100 "Node Exporter"
check_port 9093 "Alert Manager"
check_port 9091 "Push Gateway"
check_port 9090 "Prometheus"
check_port 3000 "Grafana"

mdir=$(readlink -f "$(dirname "$0")")

# Create Volumes
create_volume "node_exporter"
create_volume "alert_manager"
create_volume "push_gateway"
create_volume "prometheus"
create_volume "grafana"

# Get the current IP address of the machine
current_ip=$(get_ip)

# Create alertmanager.yml if alertmanager directory exists
alertmanager_config="alertmanager.yml"
if [[ ! -f "$alertmanager_config" ]]; then
  cat > "$alertmanager_config" <<EOL
global:
  resolve_timeout: 5m
  smtp_smarthost: 'a.mail.server:465'
  smtp_from: 'someone@domain.name'
  smtp_auth_username: 'mailuser'
  smtp_auth_password: 'mailpassword'
  smtp_require_tls: false

route:
  receiver: 'email-alert'

receivers:
  - name: 'email-alert'
    email_configs:
      - to: 'alertperson@somewhere.com'
EOL
  echo "Created alertmanager configuration: $alertmanager_config."
  echo "You will need to edit the file to configure the email settings"
fi

# Create prometheus.yml and xrootdrestart.yml if prometheus directory exists
prometheus_config="prometheus.yml"
xrootdrestart_config="xrootdrestart.yml"

if [[ ! -f "$prometheus_config" ]]; then
  cat > "$prometheus_config" <<EOL
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'node-exporter'
    scrape_interval: 15s
    static_configs:
      - targets: ["$current_ip:9100"]  # Accessing node-exporter running on the host
  - job_name: 'xrootdrestart'
    scrape_interval: 15s
    static_configs:
      - targets: ["$current_ip:8000"]
#  - job_name: 'pushgateway'   # Uncomment to to use the push gateway.
#    static_configs:
#      - targets: ["$current_ip:9091"]

rule_files:
  - xrootdrestart.yml
EOL
  echo "Created Prometheus configuration: $prometheus_config"
fi

if [[ ! -f "$xrootdrestart_config" ]]; then
  cat > "$xrootdrestart_config" <<EOL
groups:
  - name: XRootDRestartAlerts
    rules:
      - alert: XRootDMgrDown
        expr: time() - python_script_heartbeat > 15
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "XRootDRestart is not running"
          description: "The XRootDRestart has stopped emitting heartbeats for over 15 seconds."
EOL
  echo "Created XRootDRestart alert rules: $xrootdrestart_config"
fi

# Run or start containers
run_or_start_container "node-exporter" \
  "podman run -d --name node-exporter \
  --restart=always \
  -p 9100:9100 \
  -v node_exporter:/var/lib/node_exporter/textfile_collector \
  quay.io/prometheus/node-exporter:latest \
  --collector.textfile.directory=/var/lib/node_exporter/textfile_collector"

run_or_start_container "alertmanager" \
  "podman run --name alertmanager -d \
  --restart=always \
  -p 9093:9093 \
  -v ./$alertmanager_config:/etc/alertmanager/alertmanager.yml \
  quay.io/prometheus/alertmanager \
  --config.file=/etc/alertmanager/alertmanager.yml"

run_or_start_container "prometheus" \
  "podman run -d --name prometheus \
  --restart=always \
  -p 9090:9090 \
  -v ./$prometheus_config:/etc/prometheus/prometheus.yml:ro \
  -v prometheus:/prometheus \
  quay.io/prometheus/prometheus:latest"

run_or_start_container "pushgateway" \
  "podman run -d --name=pushgateway \
  -p 9091:9091 \
  -v push_gateway:/data \
  quay.io/prometheus/pushgateway:latest"


run_or_start_container "grafana" \
  "podman run -d --name grafana \
  --restart=always \
  -p 3000:3000 \
  grafana/grafana-oss:latest"
